### YamlMime:ManagedReference
items:
- uid: CIDER.LicenseManager
  commentId: T:CIDER.LicenseManager
  id: LicenseManager
  parent: CIDER
  children:
  - CIDER.LicenseManager.AddLicense(System.String)
  - CIDER.LicenseManager.ClearLicenses
  - CIDER.LicenseManager.Licenses
  - CIDER.LicenseManager.LicensesAccepted
  langs:
  - csharp
  - vb
  name: LicenseManager
  nameWithType: LicenseManager
  fullName: CIDER.LicenseManager
  type: Class
  source:
    remote:
      path: CIDER/CIDER/LicenseManager.cs
      branch: unit-testing
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: LicenseManager
    path: LicenseManager.cs
    startLine: 23
  assemblies:
  - CIDER
  namespace: CIDER
  summary: "\nThis class is a static manager class responsible for providing a quick way to get access to added license texts\n"
  example: []
  syntax:
    content: public static class LicenseManager
    content.vb: Public Module LicenseManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CIDER.LicenseManager.LicensesAccepted
  commentId: F:CIDER.LicenseManager.LicensesAccepted
  id: LicensesAccepted
  parent: CIDER.LicenseManager
  langs:
  - csharp
  - vb
  name: LicensesAccepted
  nameWithType: LicenseManager.LicensesAccepted
  fullName: CIDER.LicenseManager.LicensesAccepted
  type: Field
  source:
    remote:
      path: CIDER/CIDER/LicenseManager.cs
      branch: unit-testing
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: LicensesAccepted
    path: LicenseManager.cs
    startLine: 28
  assemblies:
  - CIDER
  namespace: CIDER
  summary: "\nThis bool saves the state of the license agreement (accepted/not accepted)\n"
  example: []
  syntax:
    content: public static bool LicensesAccepted
    return:
      type: System.Boolean
    content.vb: Public Shared LicensesAccepted As Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CIDER.LicenseManager.Licenses
  commentId: F:CIDER.LicenseManager.Licenses
  id: Licenses
  parent: CIDER.LicenseManager
  langs:
  - csharp
  - vb
  name: Licenses
  nameWithType: LicenseManager.Licenses
  fullName: CIDER.LicenseManager.Licenses
  type: Field
  source:
    remote:
      path: CIDER/CIDER/LicenseManager.cs
      branch: unit-testing
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: Licenses
    path: LicenseManager.cs
    startLine: 33
  assemblies:
  - CIDER
  namespace: CIDER
  summary: "\nThis List contains all the different licenses that are used in the project\n"
  example: []
  syntax:
    content: public static readonly List<string> Licenses
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public Shared ReadOnly Licenses As List(Of String)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: CIDER.LicenseManager.AddLicense(System.String)
  commentId: M:CIDER.LicenseManager.AddLicense(System.String)
  id: AddLicense(System.String)
  parent: CIDER.LicenseManager
  langs:
  - csharp
  - vb
  name: AddLicense(String)
  nameWithType: LicenseManager.AddLicense(String)
  fullName: CIDER.LicenseManager.AddLicense(System.String)
  type: Method
  source:
    remote:
      path: CIDER/CIDER/LicenseManager.cs
      branch: unit-testing
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: AddLicense
    path: LicenseManager.cs
    startLine: 39
  assemblies:
  - CIDER
  namespace: CIDER
  summary: "\nThis functions adds a license text to the license list\n"
  example: []
  syntax:
    content: public static void AddLicense(string License)
    parameters:
    - id: License
      type: System.String
      description: ''
    content.vb: Public Shared Sub AddLicense(License As String)
  overload: CIDER.LicenseManager.AddLicense*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CIDER.LicenseManager.ClearLicenses
  commentId: M:CIDER.LicenseManager.ClearLicenses
  id: ClearLicenses
  parent: CIDER.LicenseManager
  langs:
  - csharp
  - vb
  name: ClearLicenses()
  nameWithType: LicenseManager.ClearLicenses()
  fullName: CIDER.LicenseManager.ClearLicenses()
  type: Method
  source:
    remote:
      path: CIDER/CIDER/LicenseManager.cs
      branch: unit-testing
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: ClearLicenses
    path: LicenseManager.cs
    startLine: 47
  assemblies:
  - CIDER
  namespace: CIDER
  summary: "\nThis function clears the license list\n"
  example: []
  syntax:
    content: public static void ClearLicenses()
    content.vb: Public Shared Sub ClearLicenses
  overload: CIDER.LicenseManager.ClearLicenses*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: CIDER
  commentId: N:CIDER
  name: CIDER
  nameWithType: CIDER
  fullName: CIDER
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CIDER.LicenseManager.AddLicense*
  commentId: Overload:CIDER.LicenseManager.AddLicense
  name: AddLicense
  nameWithType: LicenseManager.AddLicense
  fullName: CIDER.LicenseManager.AddLicense
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CIDER.LicenseManager.ClearLicenses*
  commentId: Overload:CIDER.LicenseManager.ClearLicenses
  name: ClearLicenses
  nameWithType: LicenseManager.ClearLicenses
  fullName: CIDER.LicenseManager.ClearLicenses
