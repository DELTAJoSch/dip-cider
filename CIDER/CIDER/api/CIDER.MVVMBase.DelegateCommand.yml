### YamlMime:ManagedReference
items:
- uid: CIDER.MVVMBase.DelegateCommand
  commentId: T:CIDER.MVVMBase.DelegateCommand
  id: DelegateCommand
  parent: CIDER.MVVMBase
  children:
  - CIDER.MVVMBase.DelegateCommand.#ctor(System.Action{System.Object})
  - CIDER.MVVMBase.DelegateCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})
  - CIDER.MVVMBase.DelegateCommand.#ctor(System.Windows.Input.ICommand)
  - CIDER.MVVMBase.DelegateCommand.CanExecute(System.Object)
  - CIDER.MVVMBase.DelegateCommand.CanExecuteChanged
  - CIDER.MVVMBase.DelegateCommand.Execute(System.Object)
  - CIDER.MVVMBase.DelegateCommand.InvokeCanExecuteChanged
  langs:
  - csharp
  - vb
  name: DelegateCommand
  nameWithType: DelegateCommand
  fullName: CIDER.MVVMBase.DelegateCommand
  type: Class
  source:
    remote:
      path: CIDER/CIDER/MVVMBase/ViewModelBase.cs
      branch: V1.1---diploma_end
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: DelegateCommand
    path: MVVMBase/ViewModelBase.cs
    startLine: 58
  assemblies:
  - CIDER
  namespace: CIDER.MVVMBase
  summary: "\nThis class implements the ICommand interface and is used when a command is triggered\n"
  example: []
  syntax:
    content: 'public class DelegateCommand : ICommand'
    content.vb: >-
      Public Class DelegateCommand
          Implements ICommand
  inheritance:
  - System.Object
  implements:
  - System.Windows.Input.ICommand
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CIDER.MVVMBase.DelegateCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})
  commentId: M:CIDER.MVVMBase.DelegateCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})
  id: '#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})'
  parent: CIDER.MVVMBase.DelegateCommand
  langs:
  - csharp
  - vb
  name: DelegateCommand(Action<Object>, Func<Object, Boolean>)
  nameWithType: DelegateCommand.DelegateCommand(Action<Object>, Func<Object, Boolean>)
  fullName: CIDER.MVVMBase.DelegateCommand.DelegateCommand(System.Action<System.Object>, System.Func<System.Object, System.Boolean>)
  type: Constructor
  source:
    remote:
      path: CIDER/CIDER/MVVMBase/ViewModelBase.cs
      branch: V1.1---diploma_end
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: .ctor
    path: MVVMBase/ViewModelBase.cs
    startLine: 69
  assemblies:
  - CIDER
  namespace: CIDER.MVVMBase
  summary: "\nThis constructor takes the Action to be executed as well as a function to check wether the action can be executed\n"
  example: []
  syntax:
    content: public DelegateCommand(Action<object> executeAction, Func<object, bool> canExecuteAction)
    parameters:
    - id: executeAction
      type: System.Action{System.Object}
      description: The action to be executed
    - id: canExecuteAction
      type: System.Func{System.Object,System.Boolean}
      description: A function to call before executing the action
    content.vb: Public Sub New(executeAction As Action(Of Object), canExecuteAction As Func(Of Object, Boolean))
  overload: CIDER.MVVMBase.DelegateCommand.#ctor*
  nameWithType.vb: DelegateCommand.DelegateCommand(Action(Of Object), Func(Of Object, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CIDER.MVVMBase.DelegateCommand.DelegateCommand(System.Action(Of System.Object), System.Func(Of System.Object, System.Boolean))
  name.vb: DelegateCommand(Action(Of Object), Func(Of Object, Boolean))
- uid: CIDER.MVVMBase.DelegateCommand.#ctor(System.Action{System.Object})
  commentId: M:CIDER.MVVMBase.DelegateCommand.#ctor(System.Action{System.Object})
  id: '#ctor(System.Action{System.Object})'
  parent: CIDER.MVVMBase.DelegateCommand
  langs:
  - csharp
  - vb
  name: DelegateCommand(Action<Object>)
  nameWithType: DelegateCommand.DelegateCommand(Action<Object>)
  fullName: CIDER.MVVMBase.DelegateCommand.DelegateCommand(System.Action<System.Object>)
  type: Constructor
  source:
    remote:
      path: CIDER/CIDER/MVVMBase/ViewModelBase.cs
      branch: V1.1---diploma_end
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: .ctor
    path: MVVMBase/ViewModelBase.cs
    startLine: 79
  assemblies:
  - CIDER
  namespace: CIDER.MVVMBase
  summary: "\nThis constructor only takes the action to be executed\n"
  example: []
  syntax:
    content: public DelegateCommand(Action<object> executeAction)
    parameters:
    - id: executeAction
      type: System.Action{System.Object}
      description: The action to be executed
    content.vb: Public Sub New(executeAction As Action(Of Object))
  overload: CIDER.MVVMBase.DelegateCommand.#ctor*
  nameWithType.vb: DelegateCommand.DelegateCommand(Action(Of Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CIDER.MVVMBase.DelegateCommand.DelegateCommand(System.Action(Of System.Object))
  name.vb: DelegateCommand(Action(Of Object))
- uid: CIDER.MVVMBase.DelegateCommand.#ctor(System.Windows.Input.ICommand)
  commentId: M:CIDER.MVVMBase.DelegateCommand.#ctor(System.Windows.Input.ICommand)
  id: '#ctor(System.Windows.Input.ICommand)'
  parent: CIDER.MVVMBase.DelegateCommand
  langs:
  - csharp
  - vb
  name: DelegateCommand(ICommand)
  nameWithType: DelegateCommand.DelegateCommand(ICommand)
  fullName: CIDER.MVVMBase.DelegateCommand.DelegateCommand(System.Windows.Input.ICommand)
  type: Constructor
  source:
    remote:
      path: CIDER/CIDER/MVVMBase/ViewModelBase.cs
      branch: V1.1---diploma_end
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: .ctor
    path: MVVMBase/ViewModelBase.cs
    startLine: 89
  assemblies:
  - CIDER
  namespace: CIDER.MVVMBase
  summary: "\n\n"
  example: []
  syntax:
    content: public DelegateCommand(ICommand changeTheme)
    parameters:
    - id: changeTheme
      type: System.Windows.Input.ICommand
      description: ''
    content.vb: Public Sub New(changeTheme As ICommand)
  overload: CIDER.MVVMBase.DelegateCommand.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CIDER.MVVMBase.DelegateCommand.Execute(System.Object)
  commentId: M:CIDER.MVVMBase.DelegateCommand.Execute(System.Object)
  id: Execute(System.Object)
  parent: CIDER.MVVMBase.DelegateCommand
  langs:
  - csharp
  - vb
  name: Execute(Object)
  nameWithType: DelegateCommand.Execute(Object)
  fullName: CIDER.MVVMBase.DelegateCommand.Execute(System.Object)
  type: Method
  source:
    remote:
      path: CIDER/CIDER/MVVMBase/ViewModelBase.cs
      branch: V1.1---diploma_end
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: Execute
    path: MVVMBase/ViewModelBase.cs
    startLine: 98
  assemblies:
  - CIDER
  namespace: CIDER.MVVMBase
  summary: "\nThis executes the action\n"
  example: []
  syntax:
    content: public void Execute(object parameter)
    parameters:
    - id: parameter
      type: System.Object
      description: ''
    content.vb: Public Sub Execute(parameter As Object)
  overload: CIDER.MVVMBase.DelegateCommand.Execute*
  implements:
  - System.Windows.Input.ICommand.Execute(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CIDER.MVVMBase.DelegateCommand.CanExecute(System.Object)
  commentId: M:CIDER.MVVMBase.DelegateCommand.CanExecute(System.Object)
  id: CanExecute(System.Object)
  parent: CIDER.MVVMBase.DelegateCommand
  langs:
  - csharp
  - vb
  name: CanExecute(Object)
  nameWithType: DelegateCommand.CanExecute(Object)
  fullName: CIDER.MVVMBase.DelegateCommand.CanExecute(System.Object)
  type: Method
  source:
    remote:
      path: CIDER/CIDER/MVVMBase/ViewModelBase.cs
      branch: V1.1---diploma_end
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: CanExecute
    path: MVVMBase/ViewModelBase.cs
    startLine: 105
  assemblies:
  - CIDER
  namespace: CIDER.MVVMBase
  summary: "\nThis invokes the specified function\n"
  example: []
  syntax:
    content: public bool CanExecute(object parameter)
    parameters:
    - id: parameter
      type: System.Object
      description: The object to be executed
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function CanExecute(parameter As Object) As Boolean
  overload: CIDER.MVVMBase.DelegateCommand.CanExecute*
  implements:
  - System.Windows.Input.ICommand.CanExecute(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CIDER.MVVMBase.DelegateCommand.CanExecuteChanged
  commentId: E:CIDER.MVVMBase.DelegateCommand.CanExecuteChanged
  id: CanExecuteChanged
  parent: CIDER.MVVMBase.DelegateCommand
  langs:
  - csharp
  - vb
  name: CanExecuteChanged
  nameWithType: DelegateCommand.CanExecuteChanged
  fullName: CIDER.MVVMBase.DelegateCommand.CanExecuteChanged
  type: Event
  source:
    remote:
      path: CIDER/CIDER/MVVMBase/ViewModelBase.cs
      branch: V1.1---diploma_end
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: CanExecuteChanged
    path: MVVMBase/ViewModelBase.cs
    startLine: 110
  assemblies:
  - CIDER
  namespace: CIDER.MVVMBase
  summary: "\nThis event is raised when the state of the execution of the object changes\n"
  example: []
  syntax:
    content: public event EventHandler CanExecuteChanged
    return:
      type: System.EventHandler
    content.vb: Public Event CanExecuteChanged As EventHandler
  implements:
  - System.Windows.Input.ICommand.CanExecuteChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CIDER.MVVMBase.DelegateCommand.InvokeCanExecuteChanged
  commentId: M:CIDER.MVVMBase.DelegateCommand.InvokeCanExecuteChanged
  id: InvokeCanExecuteChanged
  parent: CIDER.MVVMBase.DelegateCommand
  langs:
  - csharp
  - vb
  name: InvokeCanExecuteChanged()
  nameWithType: DelegateCommand.InvokeCanExecuteChanged()
  fullName: CIDER.MVVMBase.DelegateCommand.InvokeCanExecuteChanged()
  type: Method
  source:
    remote:
      path: CIDER/CIDER/MVVMBase/ViewModelBase.cs
      branch: V1.1---diploma_end
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: InvokeCanExecuteChanged
    path: MVVMBase/ViewModelBase.cs
    startLine: 115
  assemblies:
  - CIDER
  namespace: CIDER.MVVMBase
  summary: "\nThis functions executes the specified action if the action can be invoked\n"
  example: []
  syntax:
    content: public void InvokeCanExecuteChanged()
    content.vb: Public Sub InvokeCanExecuteChanged
  overload: CIDER.MVVMBase.DelegateCommand.InvokeCanExecuteChanged*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: CIDER.MVVMBase
  commentId: N:CIDER.MVVMBase
  name: CIDER.MVVMBase
  nameWithType: CIDER.MVVMBase
  fullName: CIDER.MVVMBase
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.ICommand
  commentId: T:System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Windows.Input
  commentId: N:System.Windows.Input
  isExternal: true
  name: System.Windows.Input
  nameWithType: System.Windows.Input
  fullName: System.Windows.Input
- uid: CIDER.MVVMBase.DelegateCommand.#ctor*
  commentId: Overload:CIDER.MVVMBase.DelegateCommand.#ctor
  name: DelegateCommand
  nameWithType: DelegateCommand.DelegateCommand
  fullName: CIDER.MVVMBase.DelegateCommand.DelegateCommand
- uid: System.Action{System.Object}
  commentId: T:System.Action{System.Object}
  parent: System
  definition: System.Action`1
  name: Action<Object>
  nameWithType: Action<Object>
  fullName: System.Action<System.Object>
  nameWithType.vb: Action(Of Object)
  fullName.vb: System.Action(Of System.Object)
  name.vb: Action(Of Object)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Object,System.Boolean}
  commentId: T:System.Func{System.Object,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<Object, Boolean>
  nameWithType: Func<Object, Boolean>
  fullName: System.Func<System.Object, System.Boolean>
  nameWithType.vb: Func(Of Object, Boolean)
  fullName.vb: System.Func(Of System.Object, System.Boolean)
  name.vb: Func(Of Object, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CIDER.MVVMBase.DelegateCommand.Execute*
  commentId: Overload:CIDER.MVVMBase.DelegateCommand.Execute
  name: Execute
  nameWithType: DelegateCommand.Execute
  fullName: CIDER.MVVMBase.DelegateCommand.Execute
- uid: System.Windows.Input.ICommand.Execute(System.Object)
  commentId: M:System.Windows.Input.ICommand.Execute(System.Object)
  parent: System.Windows.Input.ICommand
  isExternal: true
  name: Execute(Object)
  nameWithType: ICommand.Execute(Object)
  fullName: System.Windows.Input.ICommand.Execute(System.Object)
  spec.csharp:
  - uid: System.Windows.Input.ICommand.Execute(System.Object)
    name: Execute
    nameWithType: ICommand.Execute
    fullName: System.Windows.Input.ICommand.Execute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.Input.ICommand.Execute(System.Object)
    name: Execute
    nameWithType: ICommand.Execute
    fullName: System.Windows.Input.ICommand.Execute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CIDER.MVVMBase.DelegateCommand.CanExecute*
  commentId: Overload:CIDER.MVVMBase.DelegateCommand.CanExecute
  name: CanExecute
  nameWithType: DelegateCommand.CanExecute
  fullName: CIDER.MVVMBase.DelegateCommand.CanExecute
- uid: System.Windows.Input.ICommand.CanExecute(System.Object)
  commentId: M:System.Windows.Input.ICommand.CanExecute(System.Object)
  parent: System.Windows.Input.ICommand
  isExternal: true
  name: CanExecute(Object)
  nameWithType: ICommand.CanExecute(Object)
  fullName: System.Windows.Input.ICommand.CanExecute(System.Object)
  spec.csharp:
  - uid: System.Windows.Input.ICommand.CanExecute(System.Object)
    name: CanExecute
    nameWithType: ICommand.CanExecute
    fullName: System.Windows.Input.ICommand.CanExecute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.Input.ICommand.CanExecute(System.Object)
    name: CanExecute
    nameWithType: ICommand.CanExecute
    fullName: System.Windows.Input.ICommand.CanExecute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Input.ICommand.CanExecuteChanged
  commentId: E:System.Windows.Input.ICommand.CanExecuteChanged
  parent: System.Windows.Input.ICommand
  isExternal: true
  name: CanExecuteChanged
  nameWithType: ICommand.CanExecuteChanged
  fullName: System.Windows.Input.ICommand.CanExecuteChanged
- uid: System.EventHandler
  commentId: T:System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: CIDER.MVVMBase.DelegateCommand.InvokeCanExecuteChanged*
  commentId: Overload:CIDER.MVVMBase.DelegateCommand.InvokeCanExecuteChanged
  name: InvokeCanExecuteChanged
  nameWithType: DelegateCommand.InvokeCanExecuteChanged
  fullName: CIDER.MVVMBase.DelegateCommand.InvokeCanExecuteChanged
