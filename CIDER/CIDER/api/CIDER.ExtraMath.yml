### YamlMime:ManagedReference
items:
- uid: CIDER.ExtraMath
  commentId: T:CIDER.ExtraMath
  id: ExtraMath
  parent: CIDER
  children:
  - CIDER.ExtraMath.CalculateAngle(System.Single,System.Single,System.Single)
  - CIDER.ExtraMath.DegToRad(System.Double)
  - CIDER.ExtraMath.RadToDeg(System.Double)
  langs:
  - csharp
  - vb
  name: ExtraMath
  nameWithType: ExtraMath
  fullName: CIDER.ExtraMath
  type: Class
  source:
    remote:
      path: CIDER/CIDER/ExtraMath.cs
      branch: master
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: ExtraMath
    path: ExtraMath.cs
    startLine: 7
  assemblies:
  - CIDER
  namespace: CIDER
  summary: "\nThis class contains static functions to calculate different equations\n"
  example: []
  syntax:
    content: public static class ExtraMath
    content.vb: Public Module ExtraMath
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CIDER.ExtraMath.DegToRad(System.Double)
  commentId: M:CIDER.ExtraMath.DegToRad(System.Double)
  id: DegToRad(System.Double)
  parent: CIDER.ExtraMath
  langs:
  - csharp
  - vb
  name: DegToRad(Double)
  nameWithType: ExtraMath.DegToRad(Double)
  fullName: CIDER.ExtraMath.DegToRad(System.Double)
  type: Method
  source:
    remote:
      path: CIDER/CIDER/ExtraMath.cs
      branch: master
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: DegToRad
    path: ExtraMath.cs
    startLine: 14
  assemblies:
  - CIDER
  namespace: CIDER
  summary: "\nThis functions converts angles from degrees to radians\n"
  example: []
  syntax:
    content: public static double DegToRad(double angle)
    parameters:
    - id: angle
      type: System.Double
      description: The angle in degrees
    return:
      type: System.Double
      description: The given angle in radians
    content.vb: Public Shared Function DegToRad(angle As Double) As Double
  overload: CIDER.ExtraMath.DegToRad*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CIDER.ExtraMath.RadToDeg(System.Double)
  commentId: M:CIDER.ExtraMath.RadToDeg(System.Double)
  id: RadToDeg(System.Double)
  parent: CIDER.ExtraMath
  langs:
  - csharp
  - vb
  name: RadToDeg(Double)
  nameWithType: ExtraMath.RadToDeg(Double)
  fullName: CIDER.ExtraMath.RadToDeg(System.Double)
  type: Method
  source:
    remote:
      path: CIDER/CIDER/ExtraMath.cs
      branch: master
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: RadToDeg
    path: ExtraMath.cs
    startLine: 24
  assemblies:
  - CIDER
  namespace: CIDER
  summary: "\nThis functions converts angles from radians to degrees\n"
  example: []
  syntax:
    content: public static double RadToDeg(double angle)
    parameters:
    - id: angle
      type: System.Double
      description: The angle in radians
    return:
      type: System.Double
      description: The given angle in degrees
    content.vb: Public Shared Function RadToDeg(angle As Double) As Double
  overload: CIDER.ExtraMath.RadToDeg*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CIDER.ExtraMath.CalculateAngle(System.Single,System.Single,System.Single)
  commentId: M:CIDER.ExtraMath.CalculateAngle(System.Single,System.Single,System.Single)
  id: CalculateAngle(System.Single,System.Single,System.Single)
  parent: CIDER.ExtraMath
  langs:
  - csharp
  - vb
  name: CalculateAngle(Single, Single, Single)
  nameWithType: ExtraMath.CalculateAngle(Single, Single, Single)
  fullName: CIDER.ExtraMath.CalculateAngle(System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: CIDER/CIDER/ExtraMath.cs
      branch: master
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: CalculateAngle
    path: ExtraMath.cs
    startLine: 37
  assemblies:
  - CIDER
  namespace: CIDER
  summary: "\nThis function calculates an angle based on accelerometer values\nCalculation according to https://www.digikey.com/en/articles/techzone/2011/may/using-an-accelerometer-for-inclination-sensing\n"
  example: []
  syntax:
    content: public static Tuple<float, float, float> CalculateAngle(float AccelerationX, float AccelerationY, float AccelerationZ)
    parameters:
    - id: AccelerationX
      type: System.Single
      description: The acceleration in the X direction
    - id: AccelerationY
      type: System.Single
      description: The acceleration in the X direction
    - id: AccelerationZ
      type: System.Single
      description: The acceleration in the X direction
    return:
      type: System.Tuple{System.Single,System.Single,System.Single}
      description: A tuple with the angles in x, y and z direction
    content.vb: Public Shared Function CalculateAngle(AccelerationX As Single, AccelerationY As Single, AccelerationZ As Single) As Tuple(Of Single, Single, Single)
  overload: CIDER.ExtraMath.CalculateAngle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: CIDER
  commentId: N:CIDER
  name: CIDER
  nameWithType: CIDER
  fullName: CIDER
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CIDER.ExtraMath.DegToRad*
  commentId: Overload:CIDER.ExtraMath.DegToRad
  name: DegToRad
  nameWithType: ExtraMath.DegToRad
  fullName: CIDER.ExtraMath.DegToRad
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: CIDER.ExtraMath.RadToDeg*
  commentId: Overload:CIDER.ExtraMath.RadToDeg
  name: RadToDeg
  nameWithType: ExtraMath.RadToDeg
  fullName: CIDER.ExtraMath.RadToDeg
- uid: CIDER.ExtraMath.CalculateAngle*
  commentId: Overload:CIDER.ExtraMath.CalculateAngle
  name: CalculateAngle
  nameWithType: ExtraMath.CalculateAngle
  fullName: CIDER.ExtraMath.CalculateAngle
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Tuple{System.Single,System.Single,System.Single}
  commentId: T:System.Tuple{System.Single,System.Single,System.Single}
  parent: System
  definition: System.Tuple`3
  name: Tuple<Single, Single, Single>
  nameWithType: Tuple<Single, Single, Single>
  fullName: System.Tuple<System.Single, System.Single, System.Single>
  nameWithType.vb: Tuple(Of Single, Single, Single)
  fullName.vb: System.Tuple(Of System.Single, System.Single, System.Single)
  name.vb: Tuple(Of Single, Single, Single)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple`3
  commentId: T:System.Tuple`3
  isExternal: true
  name: Tuple<T1, T2, T3>
  nameWithType: Tuple<T1, T2, T3>
  fullName: System.Tuple<T1, T2, T3>
  nameWithType.vb: Tuple(Of T1, T2, T3)
  fullName.vb: System.Tuple(Of T1, T2, T3)
  name.vb: Tuple(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
