### YamlMime:ManagedReference
items:
- uid: CIDER.LicenseWriter
  commentId: T:CIDER.LicenseWriter
  id: LicenseWriter
  parent: CIDER
  children:
  - CIDER.LicenseWriter.#ctor(CIDER.IReader)
  - CIDER.LicenseWriter.ReadAgreementState
  - CIDER.LicenseWriter.WriteAgreementState(System.Boolean)
  langs:
  - csharp
  - vb
  name: LicenseWriter
  nameWithType: LicenseWriter
  fullName: CIDER.LicenseWriter
  type: Class
  source:
    remote:
      path: CIDER/CIDER/LicenseWriter.cs
      branch: master
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: LicenseWriter
    path: LicenseWriter.cs
    startLine: 13
  assemblies:
  - CIDER
  namespace: CIDER
  summary: "\nThis class is used to write the state of the license agreement to the config\n"
  example: []
  syntax:
    content: public class LicenseWriter
    content.vb: Public Class LicenseWriter
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CIDER.LicenseWriter.#ctor(CIDER.IReader)
  commentId: M:CIDER.LicenseWriter.#ctor(CIDER.IReader)
  id: '#ctor(CIDER.IReader)'
  parent: CIDER.LicenseWriter
  langs:
  - csharp
  - vb
  name: LicenseWriter(IReader)
  nameWithType: LicenseWriter.LicenseWriter(IReader)
  fullName: CIDER.LicenseWriter.LicenseWriter(CIDER.IReader)
  type: Constructor
  source:
    remote:
      path: CIDER/CIDER/LicenseWriter.cs
      branch: master
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: .ctor
    path: LicenseWriter.cs
    startLine: 22
  assemblies:
  - CIDER
  namespace: CIDER
  summary: "\nThis is the constructor for the LicenseWriter class\n"
  example: []
  syntax:
    content: public LicenseWriter(IReader Reader)
    parameters:
    - id: Reader
      type: CIDER.IReader
      description: Pass a Object that implements the IReader here - inject unit testing mocks and fakes here
    content.vb: Public Sub New(Reader As IReader)
  overload: CIDER.LicenseWriter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CIDER.LicenseWriter.WriteAgreementState(System.Boolean)
  commentId: M:CIDER.LicenseWriter.WriteAgreementState(System.Boolean)
  id: WriteAgreementState(System.Boolean)
  parent: CIDER.LicenseWriter
  langs:
  - csharp
  - vb
  name: WriteAgreementState(Boolean)
  nameWithType: LicenseWriter.WriteAgreementState(Boolean)
  fullName: CIDER.LicenseWriter.WriteAgreementState(System.Boolean)
  type: Method
  source:
    remote:
      path: CIDER/CIDER/LicenseWriter.cs
      branch: master
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: WriteAgreementState
    path: LicenseWriter.cs
    startLine: 31
  assemblies:
  - CIDER
  namespace: CIDER
  summary: "\nThis function writes the state of the license agreement to the config file\n"
  example: []
  syntax:
    content: public void WriteAgreementState(bool State)
    parameters:
    - id: State
      type: System.Boolean
      description: This is the state of the license agreement
    content.vb: Public Sub WriteAgreementState(State As Boolean)
  overload: CIDER.LicenseWriter.WriteAgreementState*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CIDER.LicenseWriter.ReadAgreementState
  commentId: M:CIDER.LicenseWriter.ReadAgreementState
  id: ReadAgreementState
  parent: CIDER.LicenseWriter
  langs:
  - csharp
  - vb
  name: ReadAgreementState()
  nameWithType: LicenseWriter.ReadAgreementState()
  fullName: CIDER.LicenseWriter.ReadAgreementState()
  type: Method
  source:
    remote:
      path: CIDER/CIDER/LicenseWriter.cs
      branch: master
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: ReadAgreementState
    path: LicenseWriter.cs
    startLine: 76
  assemblies:
  - CIDER
  namespace: CIDER
  summary: "\nThis function reads the license agreement state\n"
  example: []
  syntax:
    content: public bool ReadAgreementState()
    return:
      type: System.Boolean
      description: The return value of this function specifies wether prior data could be found on the status of the license agreement
    content.vb: Public Function ReadAgreementState As Boolean
  overload: CIDER.LicenseWriter.ReadAgreementState*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: CIDER
  commentId: N:CIDER
  name: CIDER
  nameWithType: CIDER
  fullName: CIDER
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CIDER.LicenseWriter.#ctor*
  commentId: Overload:CIDER.LicenseWriter.#ctor
  name: LicenseWriter
  nameWithType: LicenseWriter.LicenseWriter
  fullName: CIDER.LicenseWriter.LicenseWriter
- uid: CIDER.IReader
  commentId: T:CIDER.IReader
  parent: CIDER
  name: IReader
  nameWithType: IReader
  fullName: CIDER.IReader
- uid: CIDER.LicenseWriter.WriteAgreementState*
  commentId: Overload:CIDER.LicenseWriter.WriteAgreementState
  name: WriteAgreementState
  nameWithType: LicenseWriter.WriteAgreementState
  fullName: CIDER.LicenseWriter.WriteAgreementState
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CIDER.LicenseWriter.ReadAgreementState*
  commentId: Overload:CIDER.LicenseWriter.ReadAgreementState
  name: ReadAgreementState
  nameWithType: LicenseWriter.ReadAgreementState
  fullName: CIDER.LicenseWriter.ReadAgreementState
