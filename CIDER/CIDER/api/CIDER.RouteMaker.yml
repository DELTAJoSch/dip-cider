### YamlMime:ManagedReference
items:
- uid: CIDER.RouteMaker
  commentId: T:CIDER.RouteMaker
  id: RouteMaker
  parent: CIDER
  children:
  - CIDER.RouteMaker.CreateRoute(CIDER.DataProvider)
  - CIDER.RouteMaker.CreateRoute(CIDER.DataProvider,System.Int32)
  langs:
  - csharp
  - vb
  name: RouteMaker
  nameWithType: RouteMaker
  fullName: CIDER.RouteMaker
  type: Class
  source:
    remote:
      path: CIDER/CIDER/RouteMaker.cs
      branch: UiRedesign
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: RouteMaker
    path: RouteMaker.cs
    startLine: 22
  assemblies:
  - CIDER
  namespace: CIDER
  summary: "\nThis class is used to create routes for the display on the map\n"
  example: []
  syntax:
    content: public class RouteMaker
    content.vb: Public Class RouteMaker
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CIDER.RouteMaker.CreateRoute(CIDER.DataProvider)
  commentId: M:CIDER.RouteMaker.CreateRoute(CIDER.DataProvider)
  id: CreateRoute(CIDER.DataProvider)
  parent: CIDER.RouteMaker
  langs:
  - csharp
  - vb
  name: CreateRoute(DataProvider)
  nameWithType: RouteMaker.CreateRoute(DataProvider)
  fullName: CIDER.RouteMaker.CreateRoute(CIDER.DataProvider)
  type: Method
  source:
    remote:
      path: CIDER/CIDER/RouteMaker.cs
      branch: UiRedesign
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: CreateRoute
    path: RouteMaker.cs
    startLine: 33
  assemblies:
  - CIDER
  namespace: CIDER
  summary: "\nThis function creates the route and adds an arrow at the starting point\n"
  example: []
  syntax:
    content: public List<MapPolyline> CreateRoute(DataProvider Data)
    parameters:
    - id: Data
      type: CIDER.DataProvider
      description: A DataProvider object that contains the gps locations of the route
    return:
      type: System.Collections.Generic.List{Microsoft.Maps.MapControl.WPF.MapPolyline}
      description: A List with polylines to display on the map
    content.vb: Public Function CreateRoute(Data As DataProvider) As List(Of MapPolyline)
  overload: CIDER.RouteMaker.CreateRoute*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CIDER.RouteMaker.CreateRoute(CIDER.DataProvider,System.Int32)
  commentId: M:CIDER.RouteMaker.CreateRoute(CIDER.DataProvider,System.Int32)
  id: CreateRoute(CIDER.DataProvider,System.Int32)
  parent: CIDER.RouteMaker
  langs:
  - csharp
  - vb
  name: CreateRoute(DataProvider, Int32)
  nameWithType: RouteMaker.CreateRoute(DataProvider, Int32)
  fullName: CIDER.RouteMaker.CreateRoute(CIDER.DataProvider, System.Int32)
  type: Method
  source:
    remote:
      path: CIDER/CIDER/RouteMaker.cs
      branch: UiRedesign
      repo: git@github.com:DELTAJoSch/dip-cider.git
    id: CreateRoute
    path: RouteMaker.cs
    startLine: 68
  assemblies:
  - CIDER
  namespace: CIDER
  summary: "\nThis function creates the route up to the specified number of points and adds an arrow at the starting point\n"
  example: []
  syntax:
    content: public List<MapPolyline> CreateRoute(DataProvider Data, int NumberOfPoints)
    parameters:
    - id: Data
      type: CIDER.DataProvider
      description: A DataProvider object that contains the gps locations of the route
    - id: NumberOfPoints
      type: System.Int32
      description: The number of locations to include
    return:
      type: System.Collections.Generic.List{Microsoft.Maps.MapControl.WPF.MapPolyline}
      description: A list of polylines to display
    content.vb: Public Function CreateRoute(Data As DataProvider, NumberOfPoints As Integer) As List(Of MapPolyline)
  overload: CIDER.RouteMaker.CreateRoute*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: CIDER
  commentId: N:CIDER
  name: CIDER
  nameWithType: CIDER
  fullName: CIDER
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CIDER.RouteMaker.CreateRoute*
  commentId: Overload:CIDER.RouteMaker.CreateRoute
  name: CreateRoute
  nameWithType: RouteMaker.CreateRoute
  fullName: CIDER.RouteMaker.CreateRoute
- uid: CIDER.DataProvider
  commentId: T:CIDER.DataProvider
  parent: CIDER
  name: DataProvider
  nameWithType: DataProvider
  fullName: CIDER.DataProvider
- uid: System.Collections.Generic.List{Microsoft.Maps.MapControl.WPF.MapPolyline}
  commentId: T:System.Collections.Generic.List{Microsoft.Maps.MapControl.WPF.MapPolyline}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<MapPolyline>
  nameWithType: List<MapPolyline>
  fullName: System.Collections.Generic.List<Microsoft.Maps.MapControl.WPF.MapPolyline>
  nameWithType.vb: List(Of MapPolyline)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Maps.MapControl.WPF.MapPolyline)
  name.vb: List(Of MapPolyline)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Maps.MapControl.WPF.MapPolyline
    name: MapPolyline
    nameWithType: MapPolyline
    fullName: Microsoft.Maps.MapControl.WPF.MapPolyline
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Maps.MapControl.WPF.MapPolyline
    name: MapPolyline
    nameWithType: MapPolyline
    fullName: Microsoft.Maps.MapControl.WPF.MapPolyline
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
