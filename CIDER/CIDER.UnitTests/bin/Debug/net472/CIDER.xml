<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CIDER</name>
    </assembly>
    <members>
        <member name="T:CIDER.ColorWriter">
            <summary>
            This class is used to configure the config file to write and read the user-specified color settings
            </summary>
        </member>
        <member name="M:CIDER.ColorWriter.#ctor(CIDER.IReader)">
            <summary>
            The constructor for the ColorWriter class
            </summary>
            <param name="reader">Pass a Object that implements the IReader here - inject unit testing mocks and fakes here</param>
        </member>
        <member name="M:CIDER.ColorWriter.GetSetTheming">
            <summary>
            This function reads the config file and gets the color and theme from the file (if available)
            </summary>
            <returns>A tuple with the elements Theme followed by Accent (strings) should be returned</returns>
        </member>
        <member name="M:CIDER.ColorWriter.SetTheming(System.String,System.String)">
            <summary>
            Writes the user specified Accent and Theme to the config
            </summary>
            <param name="Accent">This is the string name of the accent</param>
            <param name="Theme">This is the string name of the theme</param>
        </member>
        <member name="T:CIDER.DataProvider">
            <summary>
            This class can store all the required data generated by a flight
            </summary>
        </member>
        <member name="M:CIDER.DataProvider.#ctor">
            <summary>
            The constructor for this class
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.RouteName">
            <summary>
            This string contains the name of the route
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.APIKey">
            <summary>
            This contains the api key for bing maps
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.RouteDate">
            <summary>
            This contains the date of the flight
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.RouteStartTime">
            <summary>
            This contains the start time of the flight
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.RouteEndTime">
            <summary>
            This contains the end time of the flight
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.IsValidRoute">
            <summary>
            This bool contains information about the validity of the route data
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.DataPointsAcceleration">
            <summary>
            This contains the amount of data for acceleration
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.DataPointsVelocity">
            <summary>
            This contains the amount of velocity data
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.Pressure">
            <summary>
            This contains the pressure data
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.XAcceleration">
            <summary>
            This contains the acceleration data in X
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.YAcceleration">
            <summary>
            This contains the acceleration data in Y
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.ZAcceleration">
            <summary>
            This contains the acceleration data in Z
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.Roll">
            <summary>
            This contains the roll angles
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.Pitch">
            <summary>
            This contains the pitch angles
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.Yaw">
            <summary>
            This contains the yaw angles
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.DataPointsAngle">
            <summary>
            This contains the amount of data of angles
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.Heading">
            <summary>
            This contains the heading data
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.Velocity">
            <summary>
            This contains the velocity data
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.Height">
            <summary>
            This contains the height data
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.Route">
            <summary>
            This contains the Route
            </summary>
        </member>
        <member name="P:CIDER.DataProvider.AverageSattelitesInUse">
            <summary>
            This is the average amount of sattelites used during he flight
            </summary>
        </member>
        <member name="M:CIDER.DataProvider.ClearData">
            <summary>
            This function allows to clear the data stored in this object - without creating a new one
            </summary>
            <returns>True if the function was sucessful</returns>
        </member>
        <member name="T:CIDER.FileDialogExitedException">
            <summary>
            This class is an exception used in filedialog handling
            It is to be raised when the user abruptly exits the filedialog
            </summary>
        </member>
        <member name="M:CIDER.FileDialogExitedException.#ctor">
            <summary>
            This is the standard constructor
            </summary>
        </member>
        <member name="M:CIDER.FileDialogExitedException.#ctor(System.String)">
            <summary>
            This constructor takes a custom message
            </summary>
            <param name="message">The message to be sent</param>
        </member>
        <member name="M:CIDER.FileDialogExitedException.#ctor(System.String,System.Exception)">
            <summary>
            This constructor takes a message and a custom innerException
            </summary>
            <param name="message">The message to be sent</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:CIDER.ColorWriterNoColorException">
            <summary>
            This custom exception is used to signal that the ColorWriter was unable to find a preselected color
            </summary>
        </member>
        <member name="M:CIDER.ColorWriterNoColorException.#ctor">
            <summary>
            This is the standard constructor
            </summary>
        </member>
        <member name="M:CIDER.ColorWriterNoColorException.#ctor(System.String)">
            <summary>
            This constructor takes a custom message
            </summary>
            <param name="message">The message to be sent</param>
        </member>
        <member name="M:CIDER.ColorWriterNoColorException.#ctor(System.String,System.Exception)">
            <summary>
            This constructor takes a message and a custom innerException
            </summary>
            <param name="message">The message to be sent</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:CIDER.ColorWriterWritingException">
            <summary>
            This custom exception signals that the ColorWriter was unable to write the selected theme information
            </summary>
        </member>
        <member name="M:CIDER.ColorWriterWritingException.#ctor">
            <summary>
            This is the standard constructor
            </summary>
        </member>
        <member name="M:CIDER.ColorWriterWritingException.#ctor(System.String)">
            <summary>
            This constructor takes a custom message
            </summary>
            <param name="message">The message to be sent</param>
        </member>
        <member name="M:CIDER.ColorWriterWritingException.#ctor(System.String,System.Exception)">
            <summary>
            This constructor takes a message and a custom innerException
            </summary>
            <param name="message">The message to be sent</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:CIDER.ExtraMath">
            <summary>
            This class contains static functions to calculate different equations
            </summary>
        </member>
        <member name="M:CIDER.ExtraMath.DegToRad(System.Double)">
            <summary>
            This functions converts angles from degrees to radians
            </summary>
            <param name="angle">The angle in degrees</param>
            <returns>The given angle in radians</returns>
        </member>
        <member name="M:CIDER.ExtraMath.RadToDeg(System.Double)">
            <summary>
            This functions converts angles from radians to degrees
            </summary>
            <param name="angle">The angle in radians</param>
            <returns>The given angle in degrees</returns>
        </member>
        <member name="T:CIDER.KeyManager">
            <summary>
            This class handles the file interaction for writing the path to the api key file
            </summary>
        </member>
        <member name="E:CIDER.KeyManager.MapKeyChangedEvent">
            <summary>
            This event is fired when the api key changes
            </summary>
        </member>
        <member name="M:CIDER.KeyManager.#ctor(CIDER.DataProvider,CIDER.IReader)">
            <summary>
            This is the constructor for the KeyManager class
            </summary>
            <param name="Data">This expects a DataProvider object to store the api key in</param>
            <param name="Reader">Pass a Object that implements the IReader here - inject unit testing mocks and fakes here</param>
        </member>
        <member name="M:CIDER.KeyManager.Fetch">
            <summary>
            This function tries to fetch the api key from the key file (if available)
            </summary>
            <returns>This function returns a bool telling the caller if a key was found</returns>
        </member>
        <member name="M:CIDER.KeyManager.Put">
            <summary>
            This function tries to put the path of a key file into the config
            </summary>
            <returns>returns true if successful</returns>
        </member>
        <member name="T:CIDER.IReader">
            <summary>
            This interface acts as a way to inject fakes into the Reading and Writing Classes
            </summary>
        </member>
        <member name="M:CIDER.IReader.ReadAllLines(System.String)">
            <summary>
            Reads all lines of a given file
            </summary>
            <param name="filename">The path of the file to be read</param>
            <returns>Returns a string array of the file (line by line)</returns>
        </member>
        <member name="M:CIDER.IReader.ShowDialog(System.Windows.Forms.OpenFileDialog)">
            <summary>
            This function shows a openfiledialog
            </summary>
            <param name="dialog">The dialog to be shown</param>
            <returns>Returns the dialogresult</returns>
        </member>
        <member name="M:CIDER.IReader.WriteAllLines(System.String[],System.String)">
            <summary>
            Writes the given lines to the specified file
            </summary>
            <param name="lines">A string array of the lines to be written</param>
            <param name="filename">A path to the file</param>
        </member>
        <member name="M:CIDER.IReader.WriteAllText(System.String,System.String)">
            <summary>
            This function writes the given string to the specified file
            </summary>
            <param name="text">The text to be written</param>
            <param name="filename">A path to the file</param>
        </member>
        <member name="M:CIDER.IReader.FileExists(System.String)">
            <summary>
            Checks if a file exists
            </summary>
            <param name="filename">A path to the file</param>
            <returns>Returns true if the file exists</returns>
        </member>
        <member name="T:CIDER.FileReader">
            <summary>
            The production code implementation of the IReader interface
            </summary>
        </member>
        <member name="M:CIDER.FileReader.FileExists(System.String)">
            <summary>
            Checks if a file exists
            </summary>
            <param name="filename">A path to the file</param>
            <returns>Returns true if the file exists</returns>
        </member>
        <member name="M:CIDER.FileReader.ReadAllLines(System.String)">
            <summary>
            Reads all lines of a given file
            </summary>
            <param name="filename">The path of the file to be read</param>
            <returns>Returns a string array of the file (line by line)</returns>
        </member>
        <member name="M:CIDER.FileReader.ShowDialog(System.Windows.Forms.OpenFileDialog)">
            <summary>
            This function shows a openfiledialog
            </summary>
            <param name="dialog">The dialog to be shown</param>
            <returns>Returns the dialogresult</returns>
        </member>
        <member name="M:CIDER.FileReader.WriteAllLines(System.String[],System.String)">
            <summary>
            Writes the given lines to the specified file
            </summary>
            <param name="lines">A string array of the lines to be written</param>
            <param name="filename">A path to the file</param>
        </member>
        <member name="M:CIDER.FileReader.WriteAllText(System.String,System.String)">
            <summary>
            This function writes the given string to the specified file
            </summary>
            <param name="text">The text to be written</param>
            <param name="filename">A path to the file</param>
        </member>
        <member name="T:CIDER.IKeyManager">
            <summary>
            This interface can used for unit testing
            </summary>
        </member>
        <member name="M:CIDER.IKeyManager.Put">
            <summary>
            This function should be used to put a new key into a file.
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:CIDER.IKeyManager.Fetch">
            <summary>
            This function should be used to fetch a key.
            </summary>
            <returns>true if sucessful</returns>
        </member>
        <member name="T:CIDER.LicenseHolder">
            <summary>
            This class acts as a storage container for all the License texts used/referenced in the project.
            </summary>
        </member>
        <member name="P:CIDER.LicenseHolder.AcceptedLicense">
            <summary>
            This contains the license state
            </summary>
        </member>
        <member name="E:CIDER.LicenseHolder.LicenseChangedEvent">
            <summary>
            This event is raised when the license state changes
            </summary>
        </member>
        <member name="F:CIDER.LicenseHolder.ThisSoftwareLicense">
            <summary>
            This is the license for this project
            </summary>
        </member>
        <member name="F:CIDER.LicenseHolder.MahAppsLicense">
            <summary>
            This is the license for the UI library MahApps
            </summary>
        </member>
        <member name="F:CIDER.LicenseHolder.OxyPlotLicense">
            <summary>
            This is the license for the plotting library OxyPlot
            </summary>
        </member>
        <member name="F:CIDER.LicenseHolder.pilotHUDLicense">
            <summary>
            This is the license for the artificial horizon library pilotHUD
            </summary>
        </member>
        <member name="F:CIDER.LicenseHolder.NLOGLicense">
            <summary>
            This is the license for the logging library NLog
            </summary>
        </member>
        <member name="F:CIDER.LicenseHolder.docFxLicense">
            <summary>
            This is the license for the documentation automation library docFx
            </summary>
        </member>
        <member name="T:CIDER.LicenseManager">
            <summary>
            This class is a static manager class responsible for providing a quick way to get access to added license texts
            </summary>
        </member>
        <member name="F:CIDER.LicenseManager.LicensesAccepted">
            <summary>
            This bool saves the state of the license agreement (accepted/not accepted)
            </summary>
        </member>
        <member name="F:CIDER.LicenseManager.Licenses">
            <summary>
            This List contains all the different licenses that are used in the project
            </summary>
        </member>
        <member name="M:CIDER.LicenseManager.AddLicense(System.String)">
            <summary>
            This functions adds a license text to the license list
            </summary>
            <param name="License"></param>
        </member>
        <member name="M:CIDER.LicenseManager.ClearLicenses">
            <summary>
            This function clears the license list
            </summary>
        </member>
        <member name="T:CIDER.Licenses">
            <summary>
            This is the License Window.
            The purpose of this Window is to provide a way to show the user all the licenses and handle all the license-agreement related issues.
            </summary>
            <summary>
            Licenses
            </summary>
        </member>
        <member name="M:CIDER.Licenses.#ctor">
            <summary>
            This is the constructor for the License Window
            The DataContext is set here
            </summary>
        </member>
        <member name="M:CIDER.Licenses.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:CIDER.ILicense">
            <summary>
            This interface is used for unit testing
            </summary>
        </member>
        <member name="M:CIDER.ILicense.Show">
            <summary>
            This function is called to show the License View
            </summary>
        </member>
        <member name="T:CIDER.LicenseWriter">
            <summary>
            This class is used to write the state of the license agreement to the config
            </summary>
        </member>
        <member name="M:CIDER.LicenseWriter.#ctor(CIDER.IReader)">
            <summary>
            This is the constructor for the LicenseWriter class
            </summary>
            <param name="Reader">Pass a Object that implements the IReader here - inject unit testing mocks and fakes here</param>
        </member>
        <member name="M:CIDER.LicenseWriter.WriteAgreementState(System.Boolean)">
            <summary>
            This function writes the state of the license agreement to the config file
            </summary>
            <param name="State">This is the state of the license agreement</param>
        </member>
        <member name="M:CIDER.LicenseWriter.ReadAgreementState">
            <summary>
            This function reads the license agreement state
            </summary>
            <returns>The return value of this function specifies wether prior data could be found on the status of the license agreement</returns>
        </member>
        <member name="T:CIDER.LoadIO.FileIO">
            <summary>
            This class contains all the necessary parsing and file IO used in loading a CIDER data folder
            </summary>
        </member>
        <member name="M:CIDER.LoadIO.FileIO.ReadCSV(CIDER.DataProvider,System.String,CIDER.LoadIO.IRead,CIDER.ViewModels.MainWindowViewModel)">
            <summary>
            This function reads the .csv part of the data folder
            </summary>
            <param name="Data">A DataProvider object to store the ingested data in</param>
            <param name="Path">A path to the folder to the .csv file</param>
            <param name="Read">An object implementing the IRead interface</param>
            <param name="Main">A MainWindowViewModel object to toggle the buttons from</param>
        </member>
        <member name="M:CIDER.LoadIO.FileIO.ReadNmea(CIDER.DataProvider,System.String,CIDER.LoadIO.IRead,CIDER.ViewModels.MainWindowViewModel)">
            <summary>
            This function ingests the .nmea file of a valid CIDER data folder
            </summary>
            <param name="Data">A DataProvider object to store the ingested data in</param>
            <param name="Path">A path to the folder to the .nmea file</param>
            <param name="Read">An object implementing the IRead interface</param>
            <param name="Main">A MainWindowViewModel object to toggle the buttons from</param>
        </member>
        <member name="T:CIDER.LoadIO.Reader">
            <summary>
            This class implements the IRead interface. It is used to load the contents of trhe selected files
            </summary>
        </member>
        <member name="M:CIDER.LoadIO.Reader.ReadLinesCsv(System.String)">
            <summary>
            This reads all the lines in a .csv file
            </summary>
            <param name="Path">A path to the .csv file</param>
            <returns>Returns a string array with the file contents</returns>
        </member>
        <member name="M:CIDER.LoadIO.Reader.ReadLinesNmea(System.String)">
            <summary>
            This reads all the lines in a .nmea file
            </summary>
            <param name="Path">A path to the .nmea file</param>
            <returns>Returns a string array with the file contents</returns>
        </member>
        <member name="T:CIDER.LoadIO.IIO">
            <summary>
            This interface should be implemented by classes being used to parse nmea and csv files
            </summary>
        </member>
        <member name="M:CIDER.LoadIO.IIO.ReadNmea(CIDER.DataProvider,System.String,CIDER.LoadIO.IRead,CIDER.ViewModels.MainWindowViewModel)">
            <summary>
            This function should ingest the .nmea file of a valid CIDER data folder
            </summary>
            <param name="Data">A DataProvider object to store the ingested data in</param>
            <param name="Path">A path to the folder to the .nmea file</param>
            <param name="Read">An object implementing the IRead interface</param>
            <param name="Main">A MainWindowViewModel object to toggle the buttons from</param>
        </member>
        <member name="M:CIDER.LoadIO.IIO.ReadCSV(CIDER.DataProvider,System.String,CIDER.LoadIO.IRead,CIDER.ViewModels.MainWindowViewModel)">
            <summary>
            This function should ingest the .csv file of a valid CIDER data folder
            </summary>
            <param name="Data">A DataProvider object to store the ingested data in</param>
            <param name="Path">A path to the folder to the .nmea file</param>
            <param name="Read">An object implementing the IRead interface</param>
            <param name="Main">A MainWindowViewModel object to toggle the buttons from</param>
        </member>
        <member name="T:CIDER.LoadIO.IRead">
            <summary>
            This interface should be implemented by classes being used to read nmea and csv files
            </summary>
        </member>
        <member name="M:CIDER.LoadIO.IRead.ReadLinesNmea(System.String)">
            <summary>
            This function should return the file contents of a .nmea file
            </summary>
            <param name="Path">A path to the file</param>
            <returns>The file contents</returns>
        </member>
        <member name="M:CIDER.LoadIO.IRead.ReadLinesCsv(System.String)">
            <summary>
            This function should return the contents of a .csv file
            </summary>
            <param name="Path">A path to the file</param>
            <returns>The file contents</returns>
        </member>
        <member name="T:CIDER.LoadIO.FolderChecker">
            <summary>
            This class implements the IChecker interface. The purpose of this class is to check if a selected folder contains valid data.
            </summary>
        </member>
        <member name="M:CIDER.LoadIO.FolderChecker.IsCorrectFolder(System.String)">
            <summary>
            This function checks the integrity of the data in the selected folder.
            </summary>
            <param name="Path">A path to the folder</param>
            <returns>Returns true if the folder contains the correct data</returns>
        </member>
        <member name="T:CIDER.LoadIO.IChecker">
            <summary>
            The IChecker interface is supposed to be inherited by functions used for checking the data integrity of a folder
            </summary>
        </member>
        <member name="M:CIDER.LoadIO.IChecker.IsCorrectFolder(System.String)">
            <summary>
            This function should be called to check a particular folder.
            </summary>
            <param name="Path">A path to the selected folder</param>
            <returns>This function should return true if the data in the stored in the folder is ok.</returns>
        </member>
        <member name="T:CIDER.LoadIO.FolderSelector">
            <summary>
            This class implements the Folderselectioninterface. This class can show a Userinterface allowing the user to select a folder.
            If the user exits the dialog without selecting a folder, an exception will be thrown
            </summary>
        </member>
        <member name="P:CIDER.LoadIO.FolderSelector.LastSelected">
            <summary>
            This property contains the path last selected by the user
            </summary>
        </member>
        <member name="M:CIDER.LoadIO.FolderSelector.SelectFolder">
            <summary>
            This Function shows a Dialog prompting the user to select a folder
            </summary>
            <returns>A Path to the selected file</returns>
        </member>
        <member name="T:CIDER.LoadIO.IFolderSelector">
            <summary>
            This Interface implements functions used for selecting folders. It can be used as a way to inject mocks and stubs.
            </summary>
        </member>
        <member name="M:CIDER.LoadIO.IFolderSelector.SelectFolder">
            <summary>
            This Function should prompt the user to select a folder
            </summary>
            <returns>A string with the path</returns>
        </member>
        <member name="P:CIDER.LoadIO.IFolderSelector.LastSelected">
            <summary>
            This string is supposed to contain the last selected path
            </summary>
        </member>
        <member name="T:CIDER.MVVMBase.ViewModelBase">
            <summary>
            This class is the base class for all viewmodels used in thís project
            </summary>
        </member>
        <member name="F:CIDER.MVVMBase.ViewModelBase.logger">
            <summary>
            The logger used by the ViewModels
            </summary>
        </member>
        <member name="E:CIDER.MVVMBase.ViewModelBase.PropertyChanged">
            <summary>
            This event is the PropertyChangedEvent raised when the UI needs to be updated
            </summary>
        </member>
        <member name="M:CIDER.MVVMBase.ViewModelBase.SetProperty``1(``0@,``0,System.String)">
            <summary>
            This Function sets a property of the passed type
            </summary>
            <typeparam name="T">The type of the property</typeparam>
            <param name="field">The private variable the data is stored in</param>
            <param name="newValue">The new value</param>
            <param name="propertyName">The name of the property</param>
            <returns>returns a bool on the state of the function</returns>
        </member>
        <member name="T:CIDER.MVVMBase.DelegateCommand">
            <summary>
            This class implements the ICommand interface and is used when a command is triggered
            </summary>
        </member>
        <member name="M:CIDER.MVVMBase.DelegateCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            This constructor takes the Action to be executed as well as a function to check wether the action can be executed
            </summary>
            <param name="executeAction">The action to be executed</param>
            <param name="canExecuteAction">A function to call before executing the action</param>
        </member>
        <member name="M:CIDER.MVVMBase.DelegateCommand.#ctor(System.Action{System.Object})">
            <summary>
            This constructor only takes the action to be executed
            </summary>
            <param name="executeAction">The action to be executed</param>
        </member>
        <member name="M:CIDER.MVVMBase.DelegateCommand.#ctor(System.Windows.Input.ICommand)">
            <summary>
            
            </summary>
            <param name="changeTheme"></param>
        </member>
        <member name="M:CIDER.MVVMBase.DelegateCommand.Execute(System.Object)">
            <summary>
            This executes the action
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:CIDER.MVVMBase.DelegateCommand.CanExecute(System.Object)">
            <summary>
            This invokes the specified function
            </summary>
            <param name="parameter">The object to be executed</param>
            <returns></returns>
        </member>
        <member name="E:CIDER.MVVMBase.DelegateCommand.CanExecuteChanged">
            <summary>
            This event is raised when the state of the execution of the object changes
            </summary>
        </member>
        <member name="M:CIDER.MVVMBase.DelegateCommand.InvokeCanExecuteChanged">
            <summary>
            This functions executes the specified action if the action can be invoked
            </summary>
        </member>
        <member name="T:CIDER.PlotManager">
            <summary>
            This class is used to create plots
            </summary>
        </member>
        <member name="F:CIDER.PlotManager.Series">
            <summary>
            This list contains all the line series in a plot
            </summary>
        </member>
        <member name="M:CIDER.PlotManager.#ctor">
            <summary>
            This is the constructor for the PlotManager class
            </summary>
        </member>
        <member name="M:CIDER.PlotManager.GetPlotModel(System.String)">
            <summary>
            This function is used to get a plotmodel
            </summary>
            <param name="Title">This is the Title of the plot returned</param>
            <returns>Returns a plotmodel</returns>
        </member>
        <member name="M:CIDER.PlotManager.AddLineSeries(System.Collections.Generic.List{System.Single},System.String)">
            <summary>
            This function adds a new lineseries to the plot
            </summary>
            <param name="data">The data to be shown</param>
            <param name="name">The name of the lineseries</param>
        </member>
        <member name="M:CIDER.PlotManager.AddLineSeries(System.Collections.Generic.List{System.Single},System.String,OxyPlot.OxyColor)">
            <summary>
            This function adds a new lineseries to the plot
            </summary>
            <param name="data">The data to be shown</param>
            <param name="name">The name of the lineseries</param>
            <param name="color">the color of the lineseries</param>
        </member>
        <member name="M:CIDER.PlotManager.AddLineSeries(System.Collections.Generic.List{System.Single},System.String,OxyPlot.OxyColor,System.Int32)">
            <summary>
            This function adds a new lineseries to the plot
            </summary>
            <param name="data">The data to be shown</param>
            <param name="name">The name of the lineseries</param>
            <param name="color">the color of the lineseries</param>
            <param name="interval">the interval between the points</param>
        </member>
        <member name="M:CIDER.PlotManager.AddLineSeries(System.Collections.Generic.List{System.Single},System.String,System.Int32)">
            <summary>
            This function adds a new lineseries to the plot
            </summary>
            <param name="data">The data to be shown</param>
            <param name="name">The name of the lineseries</param>
            <param name="interval">the interval between the points</param>
        </member>
        <member name="T:CIDER.IProcessStarter">
            <summary>
            This interface should be implemented by classes being used to start processes
            </summary>
        </member>
        <member name="M:CIDER.IProcessStarter.Start(System.Diagnostics.ProcessStartInfo)">
            <summary>
            This function should start the specified process
            </summary>
            <param name="info">Information on the process to be started</param>
        </member>
        <member name="T:CIDER.RouteMaker">
            <summary>
            This class is used to create routes for the display on the map
            </summary>
        </member>
        <member name="M:CIDER.RouteMaker.CreateRoute(CIDER.DataProvider)">
            <summary>
            This function creates the route and adds an arrow at the starting point
            </summary>
            <param name="Data">A DataProvider object that contains the gps locations of the route</param>
            <returns>A List with polylines to display on the map</returns>
        </member>
        <member name="M:CIDER.RouteMaker.CreateRoute(CIDER.DataProvider,System.Int32)">
            <summary>
            This function creates the route up to the specified number of points and adds an arrow at the starting point
            </summary>
            <param name="Data">A DataProvider object that contains the gps locations of the route</param>
            <param name="NumberOfPoints">The number of locations to include</param>
            <returns>A list of polylines to display</returns>
        </member>
        <member name="T:CIDER.SystemTime">
            <summary>
            This class provides the current Time instead of DateTime.Now. Using this class the current time can be faked
            so it can be used in unit tests.There should be no other mentions of DateTime.Now anywhere in the production code.
            </summary>
        </member>
        <member name="M:CIDER.SystemTime.Set(System.DateTime)">
            <summary>
            Allows setting the "fake" time
            </summary>
            <param name="time">The time to be set</param>
        </member>
        <member name="M:CIDER.SystemTime.Reset">
            <summary>
            Allows resetting of the fake time
            </summary>
        </member>
        <member name="P:CIDER.SystemTime.Now">
            <summary>
            returns either fake time or current time
            </summary>
        </member>
        <member name="T:CIDER.ThemeStyler">
            <summary>
            Interaction logic for ThemeStyler.xaml
            </summary>
            <summary>
            ThemeStyler
            </summary>
        </member>
        <member name="M:CIDER.ThemeStyler.#ctor">
            <summary>
            The constructor for the ThemeStyle Window
            </summary>
        </member>
        <member name="M:CIDER.ThemeStyler.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:CIDER.ViewModels.AccelerationGraphViewModel">
            <summary>
            The ViewModel for the acceleration graph
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.AccelerationGraphViewModel.#ctor(CIDER.DataProvider)">
            <summary>
            This is the constructor for the AccelerationGraphViewModel
            </summary>
            <param name="dataProvider">A DataProvider object to read the data from</param>
        </member>
        <member name="M:CIDER.ViewModels.AccelerationGraphViewModel.Dispose">
            <summary>
            As this class implements the IDisposable interface, this function needs to be called before the GC can collect the instance
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.AccelerationGraphViewModel.Dispose(System.Boolean)">
            <summary>
            This function is called by the public Dispose Method
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:CIDER.ViewModels.AccelerationGraphViewModel.Plot">
            <summary>
            This contains the PlotModel to be displayed by the plot
            </summary>
        </member>
        <member name="T:CIDER.ViewModels.AccelerationTimedViewModel">
            <summary>
            This is the ViewModel for the AccelerationTimedView
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.AccelerationTimedViewModel.#ctor(CIDER.DataProvider)">
            <summary>
            This is the constructor for the AccelerationTimedViewModel
            </summary>
            <param name="data">A DataProvider object to read the data from</param>
        </member>
        <member name="P:CIDER.ViewModels.AccelerationTimedViewModel.slMaximum">
            <summary>
            This contains the maxximum of the slider
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AccelerationTimedViewModel.slTickFrequency">
            <summary>
            This contains the frequency of slider ticks
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.AccelerationTimedViewModel.SliderValueChanged(System.Int32)">
            <summary>
            This function should be called when the value of the slider changes
            </summary>
            <param name="value">This is the value of the slider</param>
        </member>
        <member name="P:CIDER.ViewModels.AccelerationTimedViewModel.RValUD">
            <summary>
            The value of the right up-down progBar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AccelerationTimedViewModel.LValUD">
            <summary>
            The value of the left up-down progBar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AccelerationTimedViewModel.RValFB">
            <summary>
            The value of the right forwards-backwards progBar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AccelerationTimedViewModel.LValFB">
            <summary>
            The value of the left forwards-backwards progBar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AccelerationTimedViewModel.RValLR">
            <summary>
            The value of the right left-right progBar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AccelerationTimedViewModel.LValLR">
            <summary>
            The value of the left left-right progBar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AccelerationTimedViewModel.RMaxUD">
            <summary>
            This is the value for the maximum of the right up-down progBar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AccelerationTimedViewModel.LMaxUD">
            <summary>
            This is the value for the maximum of the left up-down progBar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AccelerationTimedViewModel.RMaxFB">
            <summary>
            This is the value for the maximum of the right forward-backward progBar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AccelerationTimedViewModel.LMaxFB">
            <summary>
            This is the value for the maximum of the left forward-backward progBar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AccelerationTimedViewModel.RMaxLR">
            <summary>
            This is the value for the maximum of the right left-right progBar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AccelerationTimedViewModel.LMaxLR">
            <summary>
            This is the value for the maximum of the left left-right progBar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AccelerationTimedViewModel.UDText">
            <summary>
            This is the text to be shown with the up-down progBar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AccelerationTimedViewModel.LRText">
            <summary>
            This is the text to be shown with the left-right progBar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AccelerationTimedViewModel.FBText">
            <summary>
            This is the text to be shown with the forward-backward progBar
            </summary>
        </member>
        <member name="T:CIDER.ViewModels.AngleGraphViewModel">
            <summary>
            This is the ViewModel for the AngleGraph page
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.AngleGraphViewModel.#ctor(CIDER.DataProvider)">
            <summary>
            This is the constructor for the AngleGraphViewModel
            </summary>
            <param name="dataProvider">A DataProvider object to read the data from</param>
        </member>
        <member name="M:CIDER.ViewModels.AngleGraphViewModel.Dispose">
            <summary>
            As this class implements the IDisposable interface, this function needs to be called before the GC can collect the instance
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.AngleGraphViewModel.Dispose(System.Boolean)">
            <summary>
            This function is called by the public Dispose Method
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:CIDER.ViewModels.AngleGraphViewModel.Plot">
            <summary>
            This contains the PlotModel to be shown on the page
            </summary>
        </member>
        <member name="T:CIDER.ViewModels.AngleTimedViewModel">
            <summary>
            This is the ViewModel for the AngleTimed page
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.AngleTimedViewModel.#ctor(CIDER.DataProvider)">
            <summary>
            This is the constructor for the AngleTimedViewModel
            </summary>
            <param name="data">A DataProvider object to read the data from</param>
        </member>
        <member name="P:CIDER.ViewModels.AngleTimedViewModel.slMaximum">
            <summary>
            This contains the maximum of the slider
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AngleTimedViewModel.slTickFrequency">
            <summary>
            This contains the frequency of the slider ticks
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.AngleTimedViewModel.SliderValueChanged(System.Int32)">
            <summary>
            This should be called when the slider value changes
            </summary>
            <param name="Value">The value of the slider</param>
        </member>
        <member name="P:CIDER.ViewModels.AngleTimedViewModel.RValPitch">
            <summary>
            This contains the value for the right pitch progbar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AngleTimedViewModel.LValPitch">
            <summary>
            This contains the value for the left pitch progbar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AngleTimedViewModel.RValRoll">
            <summary>
            This contains the value for the right roll progbar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AngleTimedViewModel.LValRoll">
            <summary>
            This contains the value for the left roll progbar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AngleTimedViewModel.RValYaw">
            <summary>
            This contains the value for the right yaw progbar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AngleTimedViewModel.LValYaw">
            <summary>
            This contains the value for the left yaw progbar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AngleTimedViewModel.RMaxPitch">
            <summary>
            this contains the value of the maximum of the right pitch progbar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AngleTimedViewModel.LMaxPitch">
            <summary>
            this contains the value of the maximum of the left pitch progbar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AngleTimedViewModel.RMaxRoll">
            <summary>
            this contains the value of the maximum of the right roll progbar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AngleTimedViewModel.LMaxRoll">
            <summary>
            this contains the value of the maximum of the left roll progbar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AngleTimedViewModel.RMaxYaw">
            <summary>
            this contains the value of the maximum of the right yaw progbar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AngleTimedViewModel.LMaxYaw">
            <summary>
            this contains the value of the maximum of the left yaw progbar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AngleTimedViewModel.PitchText">
            <summary>
            This contains to be displayed next to the pitch progbars
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AngleTimedViewModel.YawText">
            <summary>
            This contains to be displayed next to the yaw progbars
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AngleTimedViewModel.RollText">
            <summary>
            This contains to be displayed next to the roll progbars
            </summary>
        </member>
        <member name="T:CIDER.ViewModels.ArtificialHorizonViewModel">
            <summary>
            This is the ViewModel for the ArtificiaHorizon page
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.ArtificialHorizonViewModel.#ctor(CIDER.DataProvider)">
            <summary>
            This is the constructor for the ArtificialHorizonViewModel
            </summary>
            <param name="Data">A DataPRovider object to read the data from</param>
        </member>
        <member name="P:CIDER.ViewModels.ArtificialHorizonViewModel.PlayPauseClickedCommand">
            <summary>
            Command connected to the MailTo Button
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.ArtificialHorizonViewModel.Pitch">
            <summary>
            This contains the value of the current pitch
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.ArtificialHorizonViewModel.Roll">
            <summary>
            This contains the calue of the current roll angle
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.ArtificialHorizonViewModel.Yaw">
            <summary>
            This contains the value of the current yaw angle
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.ArtificialHorizonViewModel.Velocity">
            <summary>
            This contains the value of the current velocity
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.ArtificialHorizonViewModel.ClimbVelocity">
            <summary>
            This contains the current climb velocity
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.ArtificialHorizonViewModel.slMaximum">
            <summary>
            This contains the maximum value of the slider
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.ArtificialHorizonViewModel.slTickFrequency">
            <summary>
            This contains the slider tick frequency
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.ArtificialHorizonViewModel.SliderValueChanged(System.Int32)">
            <summary>
            This function should be called when the slider changes its value
            </summary>
            <param name="Value">The value of the slider</param>
        </member>
        <member name="M:CIDER.ViewModels.ArtificialHorizonViewModel.Dispose">
            <summary>
            This function disposes of the object.
            </summary>
        </member>
        <member name="T:CIDER.ViewModels.HeightViewModel">
            <summary>
            This is the ViewModel for the Height page
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.HeightViewModel.#ctor(CIDER.DataProvider)">
            <summary>
            This is the constructor for the HeightViewModel page
            </summary>
            <param name="dataProvider">A DataProvider object to read the data from</param>
        </member>
        <member name="M:CIDER.ViewModels.HeightViewModel.Dispose">
            <summary>
            As this class implements the IDisposable interface, this function needs to be called before the GC can collect the instance
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.HeightViewModel.Dispose(System.Boolean)">
            <summary>
            This function is called by the public Dispose Method
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:CIDER.ViewModels.HeightViewModel.HeightMaxL">
            <summary>
            This contains the maximum of the value of the left height progress bar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.HeightViewModel.HeightMaxR">
            <summary>
            This contains the maximum of the value of the right height progress bar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.HeightViewModel.HeightValL">
            <summary>
            This contains the value of the left height progress bar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.HeightViewModel.HeightValR">
            <summary>
            This contains the value of the right height progress bar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.HeightViewModel.slTickFrequency">
            <summary>
            This contains the tick frequency of the slider
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.HeightViewModel.slMaximum">
            <summary>
            This contains the maximum of the slider
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.HeightViewModel.HeightText">
            <summary>
            This contains the text to be displayed next to the height progress bar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.HeightViewModel.Plot">
            <summary>
            This contains the Plot to be shown in the plot area
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.HeightViewModel.slValueChanged(System.Int32)">
            <summary>
            This function should be called when the slider value changes
            </summary>
            <param name="value">The value of the slider</param>
        </member>
        <member name="T:CIDER.ViewModels.LicensesViewModel">
            <summary>
            This is the ViewModel for the License Window.
            The purpose of this class is to handle all the interaction logic for the License Window.
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.LicensesViewModel.#ctor(CIDER.LicenseWriter)">
            <summary>
            This is the constructor for the LicensesViewModel
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.LicensesViewModel.SaveAcceptAgreement">
            <summary>
            This function is called when the accept button is pressed, just before the window closes.
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.LicensesViewModel.CheckboxStateChangedCommand">
            <summary>
            This is the command handler for the checkbox state.
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.LicensesViewModel.LicensesText">
            <summary>
            This is the Data Binding for the license text (textbox)
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.LicensesViewModel.CommandAcceptEnabled">
            <summary>
            This is the Data Binding for the enabled state of the accept button
            </summary>
        </member>
        <member name="T:CIDER.ViewModels.LoadViewModel">
            <summary>
            The ViewModel for the Load page.
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.LoadViewModel.#ctor(CIDER.DataProvider,CIDER.LoadIO.IChecker,CIDER.LoadIO.IFolderSelector,CIDER.LoadIO.FileIO,CIDER.ViewModels.MainWindowViewModel)">
            <summary>
            This is the constructor for the LoadViewModel
            </summary>
            <param name="data">A DataProvider object to store the ingested data in</param>
            <param name="folderChecker">An object implementing the IChecker interface to check the folders integrity</param>
            <param name="selector">An object implementing the IFolderSelector interface used to select the folder</param>
            <param name="fileIO">An object implementing the FileIO</param>
            <param name="main">An instance of the MainWindowViewModel</param>
        </member>
        <member name="P:CIDER.ViewModels.LoadViewModel.LoadClickCommand">
            <summary>
            The command fired when the loadButon is clicked
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.LoadViewModel.SelectClickCommand">
            <summary>
            The command fired when the select folder button is clicked
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.LoadViewModel.PathText">
            <summary>
            The string to display in the text box containig the path
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.LoadViewModel.CheckImage">
            <summary>
            image location for the correct folder / wrong folder structure icon
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.LoadViewModel.LoadEnabled">
            <summary>
            bool for enabling load button
            </summary>
        </member>
        <member name="T:CIDER.ViewModels.MainWindowViewModel">
            <summary>
            This is the ViewModel for the Main Window (contains view selection buttons and frame)
            This class handles the button presses - they change the views
            </summary>
        </member>
        <member name="E:CIDER.ViewModels.MainWindowViewModel.OnFrameChangeEvent">
            <summary>
            The EventHandler for the OnFrameChangeEvent
            This event is fired when the selected frame changes
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.MainWindowViewModel.#ctor(CIDER.IKeyManager,CIDER.DataProvider,CIDER.IReader,MahApps.Metro.Controls.Dialogs.IDialogCoordinator,System.Boolean)">
            <summary>
            This is the constructor for the MainWindow ViewModel
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MainWindowViewModel.ChangeToAboutCommand">
            <summary>
            This command is connected to the "about" button
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MainWindowViewModel.ChangeToAccelerationGraphCommand">
            <summary>
            This command is connected to the "Acceleration Graph" button
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MainWindowViewModel.ChangeToAccelerationTimedCommand">
            <summary>
            This command is connected to the "Acceleration Timed" button
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MainWindowViewModel.ChangeToLoadCommand">
            <summary>
            This command is connected to the "Load" button
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MainWindowViewModel.ChangeToMapRouteCommand">
            <summary>
            This command is connected to the "Route" button
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MainWindowViewModel.ChangeToMapTimedCommand">
            <summary>
            This command is connected to the "Map Timed" button
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MainWindowViewModel.ChangeToVelocityGraphCommand">
            <summary>
            This command is connected to the "Velocity Graph" button
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MainWindowViewModel.ChangeToVelocityTimedCommand">
            <summary>
            This command is connected to the "Velocity Timed" button
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MainWindowViewModel.ChangeToHeightCommand">
            <summary>
            This command is connected to the "Height" button
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MainWindowViewModel.ChangeToAngleTimedCommand">
            <summary>
            This command is connected to the "Angle Timed" button
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MainWindowViewModel.ChangeToAngleGraphCommand">
            <summary>
            This command is connected to the "Angle Graph" button
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MainWindowViewModel.ChangeToHorizonCommand">
            <summary>
            This command is connected to the "Horizon" button
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MainWindowViewModel.MapEnabled">
            <summary>
            This bool is true when the map views should be enabled
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MainWindowViewModel.FrameContent">
            <summary>
            This object contains the view to be shown in the main frame
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MainWindowViewModel.ButtonEnabled">
            <summary>
            This bool contains´information on wether the buttons hould be enabled
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.MainWindowViewModel.Initalize">
            <summary>
            This function should be started to initialize the view
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.MainWindowViewModel.ButtonState(System.Boolean)">
            <summary>
            This function sets the state of the buttons
            </summary>
            <param name="state">the state to be set (if allowed)</param>
        </member>
        <member name="M:CIDER.ViewModels.MainWindowViewModel.Dispose">
            <summary>
            As this class implements the IDisposable interface, this function needs to be called before the GC can collect the instance
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.MainWindowViewModel.Dispose(System.Boolean)">
            <summary>
            This function is called by the public Dispose Method
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:CIDER.ViewModels.MapRouteViewModel">
            <summary>
            This is the ViewModel of the MapRoute page
            </summary>
        </member>
        <member name="E:CIDER.ViewModels.MapRouteViewModel.RouteChangedEvent">
            <summary>
            This event is raised when the route changes
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.MapRouteViewModel.#ctor(CIDER.DataProvider)">
            <summary>
            This is the constructor for the MapRouteViewModel
            </summary>
            <param name="data">A DataProvider object to read the data from</param>
        </member>
        <member name="P:CIDER.ViewModels.MapRouteViewModel.APIKey">
            <summary>
            This contains the APIKey for the map
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MapRouteViewModel.MapPolylines">
            <summary>
            This is a list of polylines to display on the map
            </summary>
        </member>
        <member name="F:CIDER.ViewModels.MapRouteViewModel.MapCenter">
            <summary>
            This contains the map center
            </summary>
        </member>
        <member name="F:CIDER.ViewModels.MapRouteViewModel.MapZoomLevel">
            <summary>
            This contains the zoom level of the map
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.MapRouteViewModel.Initialize">
            <summary>
            This function draws the route. It needs to be called after the constructor finishes
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.MapRouteViewModel.CalculateCenter">
            <summary>
            This function calculates the center of the map
            </summary>
        </member>
        <member name="T:CIDER.ViewModels.MapTimedViewModel">
            <summary>
            This is the ViewModel for the MapTimed page
            </summary>
        </member>
        <member name="E:CIDER.ViewModels.MapTimedViewModel.RouteChangedEvent">
            <summary>
            This event is raised when the route changed
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.MapTimedViewModel.#ctor(CIDER.DataProvider)">
            <summary>
            This is the constructor for the MapTimedViewModel
            </summary>
            <param name="data">A DataProvider object to read the data from</param>
        </member>
        <member name="P:CIDER.ViewModels.MapTimedViewModel.APIKey">
            <summary>
            The API Key for the map view
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MapTimedViewModel.MapPolylines">
            <summary>
            A List of polylines to be shown on the map
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MapTimedViewModel.slMaximum">
            <summary>
            The maximum of the slider
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MapTimedViewModel.MapCenter">
            <summary>
            The location of the center of the map
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MapTimedViewModel.MapZoomLevel">
            <summary>
            The zoom level of the map
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.MapTimedViewModel.slTickFrequency">
            <summary>
            The tick frequency of the slider
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.MapTimedViewModel.Initialize">
            <summary>
            This function should be called right after the constructor
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.MapTimedViewModel.SliderValueChanged(System.Int32)">
            <summary>
            This function should be called when the slider value changes
            </summary>
            <param name="value">The value of the slider</param>
        </member>
        <member name="M:CIDER.ViewModels.MapTimedViewModel.CalculateCenter">
            <summary>
            This function calculates the location of the map center
            </summary>
        </member>
        <member name="T:CIDER.ViewModels.ThemeStylerViewModel">
            <summary>
            The ViewModel for the ThemeStyler window
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.ThemeStylerViewModel.#ctor">
            <summary>
            The constructor for the ThemeStyler viewmodel
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.ThemeStylerViewModel.AccentColorItemSource">
            <summary>
            This list contains all available accent colors
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.ThemeStylerViewModel.DarkThemeCommand">
            <summary>
            This is the command that is fired when the dark theme button is pressed
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.ThemeStylerViewModel.LightThemeCommand">
            <summary>
            This is the command that is fired when the light theme button is pressed
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.ThemeStylerViewModel.AccentColorChanged(System.String)">
            <summary>
            This function is called when a new color is selected
            </summary>
            <param name="color">The name of the selected color</param>
        </member>
        <member name="T:CIDER.ViewModels.VelocityGraphViewModel">
            <summary>
            This is the ViewModel for the VelocityGraph page
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.VelocityGraphViewModel.#ctor(CIDER.DataProvider)">
            <summary>
            This is the constructor of the VelocityGraphViewModel
            </summary>
            <param name="dataProvider">A DataProvider object to read the data from</param>
        </member>
        <member name="M:CIDER.ViewModels.VelocityGraphViewModel.Dispose">
            <summary>
            As this class implements the IDisposable interface, this function needs to be called before the GC can collect the instance
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.VelocityGraphViewModel.Dispose(System.Boolean)">
            <summary>
            This function is called by the public Dispose Method
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:CIDER.ViewModels.VelocityGraphViewModel.Plot">
            <summary>
            This contains the plot to be shown
            </summary>
        </member>
        <member name="T:CIDER.ViewModels.VelocityTimedViewModel">
            <summary>
            This is the ViewModel for the VelocityTimed page
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.VelocityTimedViewModel.#ctor(CIDER.DataProvider)">
            <summary>
            This is the constructor for the VelocityTimedViewModle
            </summary>
            <param name="data">A DataProvider object to read the data from</param>
        </member>
        <member name="P:CIDER.ViewModels.VelocityTimedViewModel.slMaximum">
            <summary>
            This contains the maximum value of the slider
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.VelocityTimedViewModel.slTickFrequency">
            <summary>
            This contains the tick frequency of the slider
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.VelocityTimedViewModel.SliderValueChanged(System.Int32)">
            <summary>
            This function should be called when the slider value changes
            </summary>
            <param name="value">The value of the slider</param>
        </member>
        <member name="P:CIDER.ViewModels.VelocityTimedViewModel.RVal">
            <summary>
            This is the value of the right progress bar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.VelocityTimedViewModel.LVal">
            <summary>
            This is the value of the left progress bar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.VelocityTimedViewModel.RMax">
            <summary>
            This is the maximum of the value of the right progress bar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.VelocityTimedViewModel.LMax">
            <summary>
            This is the maximum of the left value of the progress bar
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.VelocityTimedViewModel.Text">
            <summary>
            This contains the text to be displayed next to the progress bars
            </summary>
        </member>
        <member name="T:CIDER.ViewModels.AboutViewModel">
            <summary>
            This is the ViewModel for the About View
            The constructor takes a ProcessStarter Interface - this is so a seam for unit testing exists
            On init it also sets the text in the about and information TextBlocks. They can be changed afterwards, but this is not needed in normal operation
            When the button in the view is pressed, the view model responds to it by calling the function fromn the processStarter interface
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.AboutViewModel.#ctor(CIDER.IProcessStarter,CIDER.IKeyManager,CIDER.ILicense)">
            <summary>
            This is the constructor for the About Viewmodel
            </summary>
            <param name="starter">An object implementing the IProcessStarter interface</param>
            <param name="manager">A keymanager object</param>
            <param name="license">An object implementing the ILicense interface</param>
        </member>
        <member name="P:CIDER.ViewModels.AboutViewModel.RequestNavigateCommand">
            <summary>
            Command connected to the MailTo Button
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AboutViewModel.SetApiKeyCommand">
            <summary>
            Command connected to the SetApiKey Button
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AboutViewModel.ViewLicenseCommand">
            <summary>
            Command connected to the "View License" Button
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AboutViewModel.ChangeThemeCommand">
            <summary>
            Command connected to the theme changer button
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AboutViewModel.AboutText">
            <summary>
            Text displayed in the "about" textbox
            </summary>
        </member>
        <member name="P:CIDER.ViewModels.AboutViewModel.InfoText">
            <summary>
            Text displayed in the "info" textbox
            </summary>
        </member>
        <member name="T:CIDER.ViewModels.Starter">
            <summary>
            A class implementing the IProcessStarter interface. Used in production code in combination with the aboutviewmodel
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.Starter.Start(System.Diagnostics.ProcessStartInfo)">
            <summary>
            The Start-function starts a specified process
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:CIDER.ViewModels.Licenser">
            <summary>
            The implementation of ILicense for production
            </summary>
        </member>
        <member name="M:CIDER.ViewModels.Licenser.Show">
            <summary>
            This function shows the license view
            </summary>
        </member>
        <member name="T:CIDER.Views.About">
            <summary>
            Interaction logic for About.xaml
            </summary>
            <summary>
            About
            </summary>
        </member>
        <member name="M:CIDER.Views.About.#ctor(CIDER.DataProvider)">
            <summary>
            The constructor for the About View
            </summary>
            <param name="data">a dataProvider object containing the track data, normally handed by the mainViewModel</param>
        </member>
        <member name="M:CIDER.Views.About.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:CIDER.Views.AccelerationGraph">
            <summary>
            Interaction logic for AccelerationGraph page
            </summary>
            <summary>
            AccelerationGraph
            </summary>
        </member>
        <member name="M:CIDER.Views.AccelerationGraph.#ctor(CIDER.DataProvider)">
            <summary>
            This is the constructor for the AccelerationGraph page
            </summary>
            <param name="Data">A DataProvider object to read the data from</param>
        </member>
        <member name="M:CIDER.Views.AccelerationGraph.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:CIDER.Views.AccelerationTimed">
            <summary>
            Interaction logic for the AccelerationTimed page
            </summary>
            <summary>
            AccelerationTimed
            </summary>
        </member>
        <member name="M:CIDER.Views.AccelerationTimed.#ctor(CIDER.DataProvider)">
            <summary>
            This is the constructor for the AccelerationTimed Window
            </summary>
            <param name="data">A DataProvider to read the data from</param>
        </member>
        <member name="M:CIDER.Views.AccelerationTimed.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:CIDER.Views.AngleGraph">
            <summary>
            Interaction logic for the AngleGraph page
            </summary>
            <summary>
            AngleGraph
            </summary>
        </member>
        <member name="M:CIDER.Views.AngleGraph.#ctor(CIDER.DataProvider)">
            <summary>
            The constructor for the AngleGraph page
            </summary>
            <param name="Data">A DataProvidrt object to read the data from</param>
        </member>
        <member name="M:CIDER.Views.AngleGraph.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:CIDER.Views.AngleTimed">
            <summary>
            Interaction logic for the AngleTimed page
            </summary>
            <summary>
            AngleTimed
            </summary>
        </member>
        <member name="M:CIDER.Views.AngleTimed.#ctor(CIDER.DataProvider)">
            <summary>
            The constructor for the angle timed page
            </summary>
            <param name="data">A DataProvider object to read the data from</param>
        </member>
        <member name="M:CIDER.Views.AngleTimed.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:CIDER.Views.ArtificialHorizon">
            <summary>
            Interaction logic for the ArtificialHorizon page
            </summary>
            <summary>
            ArtificialHorizon
            </summary>
        </member>
        <member name="M:CIDER.Views.ArtificialHorizon.#ctor(CIDER.DataProvider)">
            <summary>
            The constructor for the ArtificialHorizon page
            </summary>
            <param name="data">A DataPRovider object to read the data from</param>
        </member>
        <member name="M:CIDER.Views.ArtificialHorizon.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:CIDER.Views.Height">
            <summary>
            Interaction logic for the Height page
            </summary>
            <summary>
            Height
            </summary>
        </member>
        <member name="M:CIDER.Views.Height.#ctor(CIDER.DataProvider)">
            <summary>
            This is the constructor for the Height page
            </summary>
            <param name="data">A DataProvider object to read the data from</param>
        </member>
        <member name="M:CIDER.Views.Height.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:CIDER.Views.Load">
            <summary>
            Interaction logic for Load.xaml
            </summary>
            <summary>
            Load
            </summary>
        </member>
        <member name="M:CIDER.Views.Load.#ctor(CIDER.DataProvider,CIDER.ViewModels.MainWindowViewModel)">
            <summary>
            This is the constructor for the Load page
            </summary>
            <param name="data">A DataProvider object to store the data in</param>
            <param name="main">An instance of the MainWindowViewModel</param>
        </member>
        <member name="M:CIDER.Views.Load.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:CIDER.Views.MapRoute">
            <summary>
            Interaction logic for the map route page
            </summary>
            <summary>
            MapRoute
            </summary>
        </member>
        <member name="M:CIDER.Views.MapRoute.#ctor(CIDER.DataProvider)">
            <summary>
            The constructor for the MapRoute page
            </summary>
            <param name="data">A DataProvider object to read the data from</param>
        </member>
        <member name="M:CIDER.Views.MapRoute.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:CIDER.Views.MapTimed">
            <summary>
            Interaction logic for the MapTimed page
            </summary>
            <summary>
            MapTimed
            </summary>
        </member>
        <member name="M:CIDER.Views.MapTimed.#ctor(CIDER.DataProvider)">
            <summary>
            This is the constructor of the MapTimed page
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:CIDER.Views.MapTimed.slValueChanged(System.Object,System.EventArgs)">
            <summary>
            This function is called when the slider value changes
            </summary>
            <param name="sender">The object that called this method</param>
            <param name="e">The event args this was called with</param>
        </member>
        <member name="M:CIDER.Views.MapTimed.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:CIDER.Views.VelocityGraph">
            <summary>
            Interaction logic for the VelocityGraph page
            </summary>
            <summary>
            VelocityGraph
            </summary>
        </member>
        <member name="M:CIDER.Views.VelocityGraph.#ctor(CIDER.DataProvider)">
            <summary>
            This is the constructor of the VelocityGraph page
            </summary>
            <param name="data">A DataProvider object to read the data from</param>
        </member>
        <member name="M:CIDER.Views.VelocityGraph.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:CIDER.Views.VelocityTimed">
            <summary>
            Interaction logic for VelocityTimed page
            </summary>
            <summary>
            VelocityTimed
            </summary>
        </member>
        <member name="M:CIDER.Views.VelocityTimed.#ctor(CIDER.DataProvider)">
            <summary>
            This is the constructor of hte VelocityTimed page
            </summary>
            <param name="data">A DataProvider object to read the data from</param>
        </member>
        <member name="M:CIDER.Views.VelocityTimed.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:CIDER.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:CIDER.App.OnStartup(System.Windows.StartupEventArgs)">
            <summary>
            This function overrides the standard OnStartup function
            </summary>
            <param name="e">The startup event args</param>
        </member>
        <member name="M:CIDER.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:CIDER.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:CIDER.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="E:CIDER.MainWindow.OnResizeStartEvent">
            <summary>
            This is the event that is raised when the resizing of the window begins
            </summary>
        </member>
        <member name="E:CIDER.MainWindow.OnResizeEndEvent">
            <summary>
            This is the event that is raised when the resize of the window ends
            </summary>
        </member>
        <member name="M:CIDER.MainWindow.#ctor">
            <summary>
            This is the constructo for the main window
            </summary>
        </member>
        <member name="M:CIDER.MainWindow.OnSourceInitialized(System.EventArgs)">
            <summary>
            This function overrides the standard onsourceinitialized function
            </summary>
            <param name="e">The event args of the init event</param>
        </member>
        <member name="M:CIDER.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:CIDER.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CIDER.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CIDER.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
